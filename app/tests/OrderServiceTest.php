<?php

declare(strict_types=1);

namespace Tests;

use App\Repositories\Interfaces\OrderRepositoryInterface;
use App\Repositories\Interfaces\OrdersToProductsRepositoryInterface;
use App\Services\OrderService;
use PHPUnit\Framework\TestCase;

class OrderServiceTest extends TestCase
{
    protected $redis;

    protected $orderRepository;

    protected $ordersToProductsRepository;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->redis = $this->getMockBuilder(\Redis::class)
            ->setConstructorArgs([])
            ->getMock();
        $this->orderRepository = $this->getMockBuilder(OrderRepositoryInterface::class)
            ->setConstructorArgs([])
            ->getMock();
        $this->ordersToProductsRepository = $this->getMockBuilder(OrdersToProductsRepositoryInterface::class)
            ->setConstructorArgs([])
            ->getMock();
    }

    public function testCreate()
    {
        $input = array(
            "user_id" => 1,
            "product_ids" => [1, 2, 3],
            "weight_coefficient" => 11,
            "dimension_coefficient" => 11,
        );

        $this->orderRepository->expects($this->once())
            ->method('insert')
            ->willReturn(1);
        $this->ordersToProductsRepository->expects($this->exactly(3))
            ->method('insert')
            ->willReturn(1);

        $orderService = new OrderService(
            $this->redis,
            $this->orderRepository,
            $this->ordersToProductsRepository
        );
        $response = $orderService->create($input);

        unset($input['product_ids']);
        $input['order_id'] = 1;
        $this->assertEquals(json_encode($input), $response['body']);
    }

    public function testGetDetail()
    {
        $order = array(
            'id' => 1,
            "user_id" => 1,
            "product_ids" => [1, 2, 3],
            "weight_coefficient" => 11,
            "dimension_coefficient" => 11,
        );
        $products = array(
            [
                "id" => "1",
                "order_id" => "1",
                "product_id" => "1",
                "amazon_price" => "100",
                "product_weight" => "100",
                "product_width" => "100",
                "product_height" => "100",
                "product_depth" => "100",
            ]
        );

        $this->orderRepository->expects($this->once())
            ->method('find')
            ->willReturn(array($order));
        $this->ordersToProductsRepository->expects($this->once())
            ->method('findAllProductsByOrderIds')
            ->willReturn($products);

        $orderService = new OrderService($this->redis, $this->orderRepository, $this->ordersToProductsRepository);

        $response = $orderService->getDetailFromDB($order['id']);

        $order['price'] = 11000100;
        $order['products'] = $products;
        $this->assertEquals($order, $response);
    }

}